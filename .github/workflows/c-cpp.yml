name: Build and Release fireflies_port with ccache

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-of:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install libunwind-dev
        run: sudo apt-get install -y libunwind-dev

      - name: Download OpenFrameworks
        run: wget https://github.com/openframeworks/openFrameworks/releases/download/0.12.0/of_v0.12.0_linux64gcc6_release.tar.gz

      - name: Extract OpenFrameworks
        run: tar xzf of_v0.12.0_linux64gcc6_release.tar.gz

      - name: Cache apt packages (OF dependencies)
        uses: actions/cache@v3
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-of-${{ hashFiles('of_v0.12.0_linux64gcc6_release/scripts/linux/ubuntu/install_dependencies.sh', '/etc/apt/sources.list', '/etc/apt/sources.list.d/**') }}
          restore-keys: |
            ${{ runner.os }}-apt-of-

      - name: Install OF dependencies
        run: |
          cd of_v0.12.0_linux64gcc6_release/scripts/linux/ubuntu
          sudo apt-get update
          sudo ./install_dependencies.sh
          cd ../../..

      - name: Configure ccache
        uses: hendrikmuhs/ccache-action@v1.2.14
        with:
          key: of-build-${{ hashFiles('of_v0.12.0_linux64gcc6_release/scripts/linux/compileOF.sh', 'of_v0.12.0_linux64gcc6_release/libs/**', 'of_v0.12.0_linux64gcc6_release/addons/**') }}

      - name: Clone ofxImGui
        run: |
          cd of_v0.12.0_linux64gcc6_release/addons
          git clone --depth 1 -b develop https://github.com/jvcleave/ofxImGui

      - name: Clone ofxTextureRecorder
        run: |
          cd of_v0.12.0_linux64gcc6_release/addons
          git clone --depth 1 https://github.com/arturoc/ofxTextureRecorder

      - name: Compile OpenFrameworks
        run: |
          cd of_v0.12.0_linux64gcc6_release/scripts/linux
          ./compileOF.sh -j$(nproc)

      - name: Upload OpenFrameworks binaries as artifact
        uses: actions/upload-artifact@v3
        with:
          name: of-binaries
          path: of_v0.12.0_linux64gcc6_release

  build-and-release-fireflies:
    needs: build-of
    runs-on: ubuntu-latest
    steps:
      - name: Checkout fireflies_port code
        uses: actions/checkout@v3

      - name: Download OpenFrameworks pre-built binaries
        uses: actions/download-artifact@v3
        with:
          name: of-binaries
          path: of_v0.12.0_linux64gcc6_release

      - name: Cache apt packages (fireflies dependencies)
        uses: actions/cache@v3
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-fireflies-${{ hashFiles('/etc/apt/sources.list', '/etc/apt/sources.list.d/**') }}
          restore-keys: |
            ${{ runner.os }}-apt-fireflies-

      - name: Install fireflies dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libxcursor-dev libxrandr-dev libxi-dev libgl1-mesa-dev mesa-common-dev libasound2-dev libpulse-dev libudev-dev libfreeimage-dev libfreetype6-dev libavformat-dev libavcodec-dev libswscale-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev

      - name: Configure ccache (fireflies)
        uses: hendrikmuhs/ccache-action@v1.2.14
        with:
          key: fireflies-build-${{ hashFiles('Makefile', '**/*.cpp', '**/*.h') }}

      - name: Build fireflies_port
        run: |
          mkdir -p of_v0.12.0_linux64gcc6_release/apps/myApps/fireflies_port
          cp -r * of_v0.12.0_linux64gcc6_release/apps/myApps/fireflies_port
          cd of_v0.12.0_linux64gcc6_release/apps/myApps/fireflies_port
          make -j$(nproc)

      - name: Make binary executable
        run: chmod +x of_v0.12.0_linux64gcc6_release/apps/myApps/fireflies_port/bin/fireflies_port

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.sha }}
          release_name: Release ${{ github.sha }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: of_v0.12.0_linux64gcc6_release/apps/myApps/fireflies_port/bin/fireflies_port
          asset_name: fireflies_port-linux64
          asset_content_type: application/octet-stream