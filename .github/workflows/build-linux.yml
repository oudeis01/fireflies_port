name: build

on:
  push:
    branches: [ main ]


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  ccache: ccache  

jobs:
  build-linux64-platforms:
    runs-on: ubuntu-latest
    strategy:
        matrix:
          cfg:
          - {target: linux64, libs: 64gcc6}
    env:
     TARGET: ${{matrix.cfg.target}}
    steps:
    - name: Remove Old lib-unwind
      run: if [ "$TARGET" = "linux64" ]; then
            sudo apt-get remove libunwind-14 -y;
           fi
    # - name: Cache Packages
    #   uses: awalsh128/cache-apt-pkgs-action@latest
    #   with:
    #     packages: wget2 make curl libunwind-dev libjack-jackd2-0 libjack-jackd2-dev freeglut3-dev libasound2-dev libxmu-dev libxxf86vm-dev g++ libgl1-mesa-dev libglu1-mesa-dev libraw1394-dev libudev-dev libdrm-dev libglew-dev libopenal-dev libsndfile1-dev libfreeimage-dev libcairo2-dev libfreetype6-dev libssl-dev libpulse-dev libusb-1.0-0-dev libgtk2.0-dev libopencv-dev libassimp-dev librtaudio-dev gdb libglfw3-dev liburiparser-dev libcurl4-openssl-dev libpugixml-dev libgconf-2-4 libgtk2.0-0 libpoco-dev libxcursor-dev libxi-dev libxinerama-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev gstreamer1.0-libav gstreamer1.0-pulseaudio gstreamer1.0-x gstreamer1.0-plugins-bad gstreamer1.0-alsa gstreamer1.0-plugins-base gstreamer1.0-plugins-good
    #     version: 1.0

    - uses: actions/checkout@v4
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2.14
      with:
        key: ${{ matrix.cfg.target }}-${{ matrix.cfg.libs }}

    - name: Download libs
      run: ./scripts/linux/download_libs.sh -a ${{matrix.cfg.libs}};
    - name: Install dependencies
      run: ./scripts/ci/$TARGET/install.sh;
    - name: Build
      run: if [ "$TARGET" = "linux64" ]; then
            scripts/ci/linux64/build.sh;
            scripts/ci/$TARGET/run_tests.sh;
           else
            scripts/ci/$TARGET/build.sh;
           fi
    # - name: Upload Libs
    #   run: scripts/ci/upload_of_lib.sh;
    #   env:
    #     GA_CI_SECRET: ${{ secrets.CI_SECRET }}



    
# jobs:
#   build-ubuntu:
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         cfg:
#           - {target: linux64, libs: 64gcc6}  # Example configuration

#     env:
#       ccache: ccache  # Set ccache environment variable

#     steps:
#       # Checking out the current repo into the folder "fireflies"
#       - name: Checkout
#         uses: actions/checkout@v4
#         with:
#           path: fireflies

#       # Checkout openFrameworks with submodules into the folder "ofx"
#       - name: Checkout openFrameworks
#         uses: actions/checkout@v4
#         with:
#           repository:  openframeworks/openFrameworks
#           path: ofx
#           submodules: true

#       # Addons: Checking out additional addons into the correct openFrameworks directory
#       - name: Checkout ofxImGui addon
#         uses: actions/checkout@v4
#         with:
#           repository:  jvcleave/ofxImGui
#           path: ofx/addons/ofxImGui
#           ref: develop
#       - name: Checkout ofxTextureRecorder addon
#         uses: actions/checkout@v4
#         with:
#           repository:  arturoc/ofxTextureRecorder
#           path: ofx/addons/ofxTextureRecorder

#       # ccache setup with key based on target and libs
#       - name: ccache
#         uses: hendrikmuhs/ccache-action@v1.2.14  # Replace with desired version
#         with:
#           key: ${{ matrix.cfg.target }}-${{ matrix.cfg.libs }}

#       # install libunwind-dev
#       - name: Install libunwind-dev
#         run: sudo apt-get install libunwind-dev

#       # install deps
#       - name: Install deps for ubuntu
#         run: sudo ./ofx/scripts/linux/ubuntu/install_dependencies.sh;

#       # install codecs
#       - name: Install codecs
#         run: sudo ./ofx/scripts/linux/ubuntu/install_codecs.sh;

#       # Download libs (adapted from official workflow)
#       - name: Download libs
#         run: ./ofx/scripts/linux/download_libs.sh -a ${{ matrix.cfg.libs }};

#       # Install dependencies (adapted from official workflow)
#       - name: Install dependencies
#         run: ./ofx/scripts/ci/${{ matrix.cfg.target }}/install.sh;

#       # Build openFrameworks (adapted from official workflow)
#       - name: Build
#         run: |
#             cd ./ofx/libs/openFrameworksCompiled/project
#             make -j$(nproc)
# #  if [ "$TARGET" = "linux64" ]; then
# #     ./ofx/scripts/ci/linux64/build.sh;
# #     ./ofx/scripts/ci/${{ matrix.cfg.target }}/run_tests.sh;
# #  else
# #     ./ofx/scripts/ci/${{ matrix.cfg.target }}/build.sh;
# #  fi

#       # Building the project
#       - name: Building firefliesApp
#         run: |
#           export OF_ROOT=${{ github.workspace }}/ofx
#           cd ./fireflies/firefliesApp
#            make -j$(nproc) -f Makefile.github-action

#       # Upload executable binaries to GitHub
#       - name: Uploading artifacts
#         uses: actions/upload-artifact@v4
#         with:
#           name: Linux Artifacts
#           path: ./fireflies/firefliesApp/bin/