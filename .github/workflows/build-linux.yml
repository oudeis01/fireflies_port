name: build-project

on:
  push:
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  pull_request:
    paths-ignore:
      - '**/*.md'
      - 'docs/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  ccache: ccache  
  MY_PROJECT_DIR: "fireflies-port"
  CCACHE_DIR: ~/ccache
  CXXFLAGS: "-std=c++20 -Wall -Wextra"

jobs:
  build-project:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cfg:
          - { target: linux64, libs: 64gcc6 }
    env:
      TARGET: ${{ matrix.cfg.target }}

    steps:


    - name: Set Up Dependencies
      run: |
            sudo apt-get update
            sudo apt-get install -y ccache wget2 make curl libunwind-dev libjack-jackd2-dev \
              freeglut3-dev libasound2-dev libxmu-dev libxxf86vm-dev g++ libgl1-mesa-dev libglu1-mesa-dev \
              libraw1394-dev libudev-dev libdrm-dev libglew-dev libopenal-dev libsndfile1-dev \
              libfreeimage-dev libcairo2-dev libfreetype6-dev libssl-dev libpulse-dev libusb-1.0-0-dev \
              libgtk2.0-dev libopencv-dev libassimp-dev librtaudio-dev gdb libglfw3-dev liburiparser-dev \
              libcurl4-openssl-dev libpugixml-dev libgconf-2-4 libgtk2.0-0 libpoco-dev libxcursor-dev \
              libxi-dev libxinerama-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
              gstreamer1.0-libav gstreamer1.0-pulseaudio gstreamer1.0-x gstreamer1.0-plugins-bad \
              gstreamer1.0-alsa gstreamer1.0-plugins-base gstreamer1.0-plugins-good ccache

    - name: Install GCC
      run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y software-properties-common
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt update
          sudo apt update && sudo apt install build-essential -y
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-14 100
    - name: Show GCC Version
      run: g++ --version
    - name: Checkout Repository
      uses: actions/checkout@v4
    - name: Install Dependencies
      run: ./scripts/ci/$TARGET/install.sh
    - name: Build
      run: |
          if [ "$TARGET" = "linux64" ]; then
            scripts/ci/linux64/build.sh;
            scripts/ci/$TARGET/run_tests.sh;
          else
            scripts/ci/$TARGET/build.sh;
          fi

    - name: Cache ccache
      uses: actions/cache@v3
      with:
        path: ~/.ccache
        key: ccache-${{ runner.os }}-${{ matrix.cfg.target }}
        restore-keys: |
          ccache-${{ runner.os }}-

    - name: Configure ccache for g++-11
      run: |
        sudo apt-get install -y gcc-11 g++-11
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 100
        ccache --set-config=compiler_check=content
        

    - name: Configure ccache
      run: |
        ccache --zero-stats
        ccache --max-size=5G

    - name: Checkout openFrameworks Repository
      uses: actions/checkout@v4
      with:
        repository: openframeworks/openFrameworks
        path: of_root

    - name: Checkout Your Project Repository
      uses: actions/checkout@v4
      with:
        path: of_root/apps/myApps/$MY_PROJECT_DIR

    - name: Checkout ofxImGui addon
      uses: actions/checkout@v4
      with:
        repository:  jvcleave/ofxImGui
        path: of_root/addons/ofxImGui
        ref: develop
    - name: Checkout ofxTextureRecorder addon
      uses: actions/checkout@v4
      with:
        repository:  arturoc/ofxTextureRecorder
        path: of_root/addons/ofxTextureRecorder

    - name: Download openFrameworks Libraries
      run: cd of_root && ./scripts/linux/download_libs.sh -a ${{ matrix.cfg.libs }}

    - name: install libunwind-dev
      run: sudo apt-get install libunwind-dev

    - name: Install Dependencies
      # run: cd of_root && ./scripts/ci/${{ matrix.cfg.target }}/install.sh
      run: cd of_root/scripts/linux/ubuntu && sudo ./install_dependencies.sh

    - name: install codecs
      run: cd of_root/scripts/linux/ubuntu && sudo ./install_codecs.sh

    - name: Check ccache Stats
      run: ccache -s

    - name: Build openFrameworks Core
      # run: cd of_root && ./scripts/ci/${{ matrix.cfg.target }}/build.sh
      run: |
        sed -i 's/JOBS=1/JOBS=$(nproc)/' of_root/scripts/linux/compileOF.sh
        cd of_root/scripts/linux && ./compileOF.sh -j$(nproc)

    - name: Build Your Project
      run: |
        cd of_root/apps/myApps/$MY_PROJECT_DIR
        make -j$(nproc)
        ccache --show-stats

    - name: Upload Artifact (Binary)
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.cfg.target }}-binary
        path: of_root/apps/myApps/$MY_PROJECT_DIR/bin